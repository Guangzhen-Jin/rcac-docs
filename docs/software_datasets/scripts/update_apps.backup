#!/usr/bin/env bash
# ./scripts/update_apps.sh
# Generate app-centric JSON inventory from ../modulefiles
# Extract first help([[…]]) per app
# Skip Lua files with version-hash suffix, .modulerc.lua, modtree and biocontainers folders
# Output: ./apps_inventory.json
# Requires: jq, perl

set -euo pipefail

OUTPUT_FILE="./apps_inventory.json"
MODULEDIR="../modulefiles"  # relative path from ./scripts

if [ ! -d "$MODULEDIR" ]; then
    echo "Error: modulefiles directory not found at $MODULEDIR" >&2
    exit 1
fi

TMPFILE="$(mktemp --suffix=.jsonl)"
trap 'rm -f "$TMPFILE"' EXIT

# 1) Collect version info (skip default symlinks and excluded files)
find "$MODULEDIR" -type f -name "*.lua" ! -name "default" -print0 |
while IFS= read -r -d '' filepath; do
    filename="$(basename "$filepath")"

    # Skip hash-suffixed files and .modulerc.lua
    if [[ "$filename" =~ -[a-zA-Z0-9]{7}\.lua$ ]] || [[ "$filename" == ".modulerc.lua" ]]; then
        continue
    fi

    relpath="${filepath#"$MODULEDIR"/}"

    # Skip modtree and biocontainers folders
    if [[ "$relpath" == modtree/* ]] || [[ "$relpath" == biocontainers/* ]]; then
        continue
    fi

    IFS='/' read -r cluster compiler app_dir filename_rest <<< "$relpath"
    [ -z "$cluster" ] && continue
    [ -z "$compiler" ] && continue
    [ -z "$app_dir" ] && continue
    [ -z "$filename_rest" ] && continue
    version="${filename_rest%.*}"

    jq -n --arg app "$app_dir" \
          --arg cluster "$cluster" \
          --arg compiler "$compiler" \
          --arg version "$version" \
          '{app:$app, cluster:$cluster, compiler:$compiler, version:$version}' >> "$TMPFILE"
done

# 2) Build app-centric JSON with availability
jq -s '
    reduce .[] as $it ({}; 
        .[$it.app] |= (if . == null then {description:"", availability:{}} else . end) |
        .[$it.app].availability[$it.cluster] |= ((. // []) + [$it.version])
    )
    | to_entries
    | map({ key: .key,
            value: (.value | .availability |= (with_entries(.value |= (unique | sort))) ) })
    | from_entries
' "$TMPFILE" > "$OUTPUT_FILE"

# 3) Extract description from first help([[…]]) per app (skip excluded files)
find "$MODULEDIR" -type f -name "*.lua" ! -name "default" -print0 |
while IFS= read -r -d '' filepath; do
    filename="$(basename "$filepath")"

    # Skip hash-suffixed files and .modulerc.lua
    if [[ "$filename" =~ -[a-zA-Z0-9]{7}\.lua$ ]] || [[ "$filename" == ".modulerc.lua" ]]; then
        continue
    fi

    relpath="${filepath#"$MODULEDIR"/}"
    # Skip modtree and biocontainers folders
    if [[ "$relpath" == modtree/* ]] || [[ "$relpath" == biocontainers/* ]]; then
        continue
    fi

    # Correct app folder extraction
    app="$(echo "$filepath" | awk -F/ '{print $(NF-1)}')"

    # Perl-based multi-line help extraction
    desc=$(perl -0777 -ne 'if(/\bhelp\(\[\[(.*?)\]\]\)/s){print "$1\n"}' "$filepath" \
           | tr '\n' ' ' | sed 's/^[ \t]*//;s/[ \t]*$//')

    # Skip empty descriptions
    if [ -n "$desc" ]; then
        jq --arg app "$app" --arg desc "$desc" \
           'if .[$app].description=="" then .[$app].description=$desc else . end' \
           "$OUTPUT_FILE" > "${OUTPUT_FILE}.tmp" && mv "${OUTPUT_FILE}.tmp" "$OUTPUT_FILE"
    fi
done

echo "App-centric inventory written to $OUTPUT_FILE (with descriptions, filtered hash-suffixed, .modulerc.lua, modtree, biocontainers)"
 
